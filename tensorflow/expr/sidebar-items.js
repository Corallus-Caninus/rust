initSidebarItems({"enum":[["OpLevel","Denotes operator precedence. Used for displaying expressions as strings."],["ShapeHint","Enum of an exprâ€™s possible shape states"]],"struct":[["Add","Expression resulting from adding two subexpressions."],["Assign","Expression that assigns a value to a variable."],["Compiler","A `Compiler` compiles `Expr`s to `Operation`s."],["Constant","Expression for a constant."],["Div","Expression resulting from dividing two subexpressions."],["Expr","A operation in an expression tree, which is a thin wrapper around an ExprImpl."],["Mul","Expression resulting from multiplying two subexpressions."],["Neg","Expression resulting from negation of an expression."],["Placeholder","Expression for a placeholder."],["Rem","Expression resulting from taking a modulus."],["Sub","Expression resulting from subtracting two subexpressions."],["TruncateDiv","Expression that assigns a value to a variable."],["Variable","Expression for a variable."]],"trait":[["AnyExpr","An `AnyExpr` is just an `Expr<T>` for some unknown `T`. Clients should not implement this."],["ExprImpl","Trait implemented by all expression types. Most users will want to store an Expr instead."]]});