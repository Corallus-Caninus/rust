initSidebarItems({"constant":[["CLASSIFY_INPUTS","Classification inputs."],["CLASSIFY_METHOD_NAME","Classification method name used in a SignatureDef."],["CLASSIFY_OUTPUT_CLASSES","Classification classes output."],["CLASSIFY_OUTPUT_SCORES","Classification scores output."],["DEFAULT_SERVING_SIGNATURE_DEF_KEY","Key in the signature def map for `default` serving signatures. The default signature is used in inference requests where a specific signature was not specified."],["PREDICT_INPUTS","Predict inputs."],["PREDICT_METHOD_NAME","Prediction method name used in a SignatureDef."],["PREDICT_OUTPUTS","Predict outputs."],["REGRESS_INPUTS","Regression inputs."],["REGRESS_METHOD_NAME","Regression method name used in a SignatureDef."],["REGRESS_OUTPUTS","Regression outputs."]],"enum":[["AttrType","Describes the type of the value of an attribute on an operation."],["Code","Error values that can be returned."],["DataType","Type of a single tensor element."]],"fn":[["get_all_registered_kernels","Returns a serialized KernelList protocol buffer containing KernelDefs for all registered kernels."],["get_registered_kernels_for_op","Returns a serialized KernelList protocol buffer containing KernelDefs for all kernels registered for the operation named `name`."],["version","Returns a string describing version information of the `TensorFlow` library. `TensorFlow` is using semantic versioning."]],"mod":[["eager","C API extensions to experiment with eager execution of kernels."],["expr","This module builds computation graphs."],["io","A module for reading and writing TFRecords, Tensorflow’s preferred on-disk data format."],["ops","This module exposes functions for building standard operations."],["train","This module supports building and training models."]],"struct":[["AttrMetadata","AttrMetadata describes the value of an attribute on an operation."],["BFloat16","BFloat16 provides a Rust type for BFloat16. Note that this is not the same as half::f16.  BFloat16 is not an IEEE-754 16-bit float.  See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/framework/bfloat16.h for details."],["Device","Metadata about a device."],["FetchToken","An opaque token for retrieving an output from a computation."],["Function","Function is a grouping of operations with defined inputs and outputs. Once created and added to graphs, functions can be invoked by creating an operation whose operation type matches the function name."],["FunctionOptions","Options that can be passed during function creation."],["Graph","Represents a computation graph.  Graphs may be shared between sessions. Graphs are thread-safe when used as directed."],["ImportGraphDefOptions","`ImportGraphDefOptions` holds options that can be passed to `Graph::import_graph_def`."],["ImportGraphDefResults","ImportGraphDefResults holds results that are generated by Graph::import_graph_def_with_results()."],["Input","A `Input` is one end of a graph edge. It holds an operation and an index into the inputs of that operation."],["Library","Dynamically loaded plugins. The C API doesn’t provide a way to unload libraries, so nothing happens when this goes out of scope."],["MetaGraphDef","Contains data necessary to restart training, run inference. It can be used to serialize/de-serialize memory objects necessary for running computation in a graph when crossing the process boundary. It can be used for long term storage of graphs, cross-language execution of graphs, etc."],["OpArgDef","An argument definition for a graph operation."],["OpAttrDef","An attribute definition for a graph operation."],["OpDef","A Graph operation exposed from an external plugin"],["OpList","Collection of OpDefs exposed from an external plugin"],["Operation","An `Operation` is a node in a `Graph`. It is a computation which accepts inputs and produces outputs."],["OperationDescription","An `OperationDescription` is an `Operation` in the process of being built (i.e. the builder pattern)."],["OperationIter","Iterator over the operations in a `Graph`."],["Output","A `Output` is one end of a graph edge. It holds an operation and an index into the outputs of that operation."],["OutputName","Names a specific Output in the graph."],["QInt16","Quantized type for i16."],["QInt32","Quantized type for i32."],["QInt8","Quantized type for i8."],["QUInt16","Quantized type for u16."],["QUInt8","Quantized type for u8."],["SaveModelError","Error generated while saving a model."],["SavedModelBuilder","Builds a SavedModelSaver, which can be used to save models."],["SavedModelBundle","Aggregation type for a saved model bundle."],["SavedModelSaver","Creates saved models. Use a SavedModelBuilder to create a SavedModelSaver."],["Scope","A `Scope` object represents a set of related TensorFlow ops that have the same properties such as a common name prefix."],["Session","Manages a single graph and execution."],["SessionOptions","Options that can be passed during session creation."],["SessionRunArgs","Manages the inputs and outputs for a single execution of a graph."],["Shape","A Shape is the shape of a tensor.  A Shape may be an unknown rank, or it may have a known rank with each dimension being known or unknown."],["SignatureDef","SignatureDef defines the signature of a computation supported by a TensorFlow graph."],["Status","Holds error information when communicating with back and forth with `tensorflow`."],["Tensor","Holds a multi-dimensional array of elements of a single data type."],["TensorInfo","Information about a Tensor necessary for feeding or retrieval."],["Variable","Holds state in the form of a tensor that persists across steps."],["VariableBuilder","Builds a Variable."],["WhileBuilder","A WhileBuilder is used to build a while loop."]],"trait":[["TensorType","A Rust type that maps to a `DataType`."]],"type":[["OutputToken","Deprecated alias for FetchToken."],["Result","Convenience type for `Result` with `Status` as the error type."],["StepWithGraph","Deprecated alias for SessionRunArgs."]]});